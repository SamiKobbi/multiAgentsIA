
Spring framework est un framework java opensource concu pour faciliter le developpement des applications web et desktop grace à spring core et ainsi ses difféérents modules telsque le spring jdbc/jms/transactions/AOP.
Spring architecture:

Le conteneur Spring est au cœur du framework Spring. Le conteneur créera les objets, assurera la liaison de beans et gérera leur cycle de vie complet, de la création à la destruction. Le conteneur Spring utilise DI pour gérer les composants qui constituent une application. Ces objets sont appelés spring beans.

 

1-Bean scopes :

singleteon: stateless.
prototype: statefull.
request:  a single bean instance par une requete HTTP.
session: un seul bean par une session HTTP.
global session - un seul bean  par une Session HTTP globale. valable pour un contexte portlet

L’injection de dépendances se fait par deux méthodes :
-La première est basée sur l’utilisation de constructeur et la deuxième par des setters.
-On pourra gérer les dépendances implicitement grâce à l’autowire by name, by type ou by constructor(constructor-arg)
@Autowired to autowire(or search) by-type
@Qualifier to autowire(or search) by-name
@Component(value="car")
public class Car implements Vehicle {
@Component(value="bike")
public class Bike implements Vehicle {
NoUniqueBeanDefinitionException:
@Autowired
@Qualifier("bike")
    private Vehicle vehicle;


Bean factory vs application context :
L’application context(aggressive) est une superclass(lazy) de Bean factory. Elle instancie les beans et le relie quand le container commence ce qui n’est pas le cas de Bean factory qui instancie le bean suite à l’appel getBean.



functional interface : an interface containing a single abstract method




Vos applications Angular 8 seront désormais automatiquement plus performantes,
 grâce au chargement différentiel.

Lors du chargement différentiel, deux ensembles sont créés lors de la génération pour la production: 
un ensemble pour les navigateurs modernes prenant 
en charge ES2015 + et un ensemble pour les anciens navigateurs ne prenant en charge que la version ES5 de JavaScript.
 Le bon paquet sera chargé automatiquement par le par le navigateur, grâce au support des modules ES6 
 dans les nouveaux navigateurs.

Cette nouvelle fonctionnalité entraîne l’amélioration la plus importante des performances d’Angular v8. 

Pour bénéficier du chargement différentiel, 
vous n’avez rien de spécial à faire. La commande ng build avec l’indicateur --prod
 se chargera de tout regrouper de manière à ce que le chargement différentiel fonctionne immédiatement:


Importations dynamiques pour les itinéraires paresseux

Lazy-loaded routes  utilisent désormais la syntaxe d'importation dynamique standard. Cela signifie que TypeScript 
seront mieux en mesure de se plaindre lorsque des modules sont manquants ou mal orthographiés.

De

{chemin: '/ cart', loadChildren: './cart/cart.module#CartModule'}
A

{chemin: `/ cart`, loadChildren: () => import (`. / cart / cart.module`) .then (m => m.CartModule)}
Le changement de syntaxe sera pris en charge pour vous si vous utilisez la commande ng upgrade pour mettre à niveau votre application.